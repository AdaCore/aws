
@@--  This file must be included when any .tjs templates are used

<script src="/we_js/prototype.js" type="text/javascript"></script>
<script src="/we_js/behaviour.js" type="text/javascript"></script>
<script src="/we_js/scriptaculous.js" type="text/javascript"></script>

<script type="text/javascript">

@@-- --------------------------------
@@-- Used to report javascript errors

   function report_error (request)
   {
      alert ('Sorry. There was an error.');
   }

@@-- --------------------------------
@@-- Update the behavior rules, needed when loading new section
@@-- containing JavaScript code.

   function update_behaviour ()
   {
      Behaviour.apply ();
   }

@@-- --------------------------------
@@-- Serialize a tag or all fields in a form

   function serialize (elm)
   {
      var param = "";

      if ($(elm).tagName == "FORM") {
         param = Form.serialize (elm);
      } else if ($(elm).tagName == "UL") {
         param = Sortable.serialize(elm);
      } else {
         param = elm + "=" + $F(elm);
      }

      return (param);
   }


@@-- --------------------------------
@@-- Call url?pars and put result into placeholder

   function aws_replace (url, pars, placeholder, oncomplete)
   {
      var rplaceholder = $(placeholder);

      if (rplaceholder.tagName == "TEXTAREA" ||
          rplaceholder.tagName == "INPUT")
         var O_ajax = new Ajax.Request
            (url,
             {method:     'get',
              parameters: pars,
              onFailure:  report_error,
              onComplete: function(req)
                            {rplaceholder.value = req.responseText;
                             if (oncomplete != "") oncomplete();}});
      else
         var O_ajax = new Ajax.Updater
            ({success: placeholder},
             url,
             {method:     'get',
              parameters: pars,
              onFailure:  report_error,
              onComplete: function(req)
                            {update_behaviour();
                             if (oncomplete != "") oncomplete();}});
   }

@@-- --------------------------------
@@-- Call url?pars and execute aws_xml_handler methods then the
@@-- oncomplete method (to chain commands) if defined

   function aws_xml_request (url, pars, oncomplete)
   {
       var myAjax = new Ajax.Request
           (url,
            {method: 'get',
             parameters: pars,
             onFailure : report_error,
             onComplete : function(req)
                            {aws_xml_handler(req);
                             update_behaviour();
                             if (oncomplete != "") oncomplete();}});
   }

   function aws_xml_handler (result)
   {
      // get XML result
      var xml_result = result.responseXML;
      var response   = xml_result.getElementsByTagName('response');
      var i = 0;
      for (i = 0; i < response[0].childNodes.length; i++) {
         var node = response[0].childNodes[i];
         if (node.nodeName == 'replace') {
            aws_xml_handler_replace (node);
         } else if (node.nodeName == 'clear') {
            aws_xml_handler_clear (node);
         } else if (node.nodeName == 'select') {
            aws_xml_handler_select (node);
         } else if (node.nodeName == 'radio') {
            aws_xml_handler_radio (node);
         } else if (node.nodeName == 'check') {
            aws_xml_handler_check (node);
         } else if (node.nodeName == 'get') {
            aws_xml_handler_get (node);
         } else if (node.nodeName == 'location') {
            aws_xml_handler_location (node);
         } else if (node.nodeName == 'create_sortable') {
            aws_xml_handler_create_sortable (node);
         } else if (node.nodeName == 'destroy_sortable') {
            aws_xml_handler_destroy_sortable (node);
         } else if (node.nodeName == 'apply_style') {
            aws_xml_handler_apply_style (node);
         }
      }
   }

   // Replace a node content by an HTML String
   function aws_xml_handler_replace (node)
   {
      var placeholder_id = node.getAttribute("id");
      var placeholder_content;

      if (node.childNodes.length > 1) {
         placeholder_content = node.childNodes[1].nodeValue;
      } else {
         placeholder_content = node.firstChild.nodeValue;
      }
      if ($(placeholder_id).tagName == "TEXTAREA" ||
          $(placeholder_id).tagName == "INPUT") {
         $(placeholder_id).value = placeholder_content;
      } else {
         $(placeholder_id).innerHTML = placeholder_content;
      }
      update_behaviour ();
   }

   // Clear a node
   function aws_xml_handler_clear (node)
   {
      var placeholder_id = node.getAttribute("id");
      if ($(placeholder_id).tagName == "TEXTAREA" ||
          $(placeholder_id).tagName == "INPUT") {
         $(placeholder_id).value = "";
      } else {
         $(placeholder_id).innerHTML = "";
      }
   }

   // Action on select : add, delete or select an option, or clear a select
   function aws_xml_handler_select (node)
   {
      var select_action = node.getAttribute("action");
      var select_id     = node.getAttribute("id");
      if (select_action == "add") {
         var option_value = node.getAttribute("option_value");
         var option_content = node.getAttribute("option_content");
         addToSelect(select_id, option_value, option_content);
      } else if (select_action == "clear") {
         clearSelect(select_id);
      } else if (select_action == "delete") {
         var option_value = node.getAttribute("option_value");
         delSelectOption(select_id, option_value);
      } else if (select_action == "select") {
         var option_value = node.getAttribute("option_value");
         selectChangeSelected(select_id, option_value);
      }
   }

   // Action on radio
   function aws_xml_handler_radio (node)
   {
      var action = node.getAttribute('action');
      var id     = node.getAttribute('id');
      if (action == 'select') {
         $(id).checked = 1;
      }
   }

   // Action on check
   function aws_xml_handler_check (node)
   {
      var action = node.getAttribute('action');
      var id     = node.getAttribute('id');
      if (action == 'select') {
         $(id).checked = 1;
      } else if (action == 'clear') {
         $(id).checked = 0;
      }
   }

   // Action on get
   function aws_xml_handler_get (node)
   {
      var url  = node.getAttribute('url');
      var pars = '';
      var i    = 0;

      for (i = 0; i < node.childNodes.length; i++) {
         var current_node = node.childNodes[i];
         if (current_node.nodeName == 'parameters') {
            if (pars != '') {
               pars = pars + '&';
            }
            pars = pars + current_node.getAttribute('value');
         } else if (current_node.nodeName == 'field') {
            if (pars != '') {
               pars = pars + '&';
            }
            var id = current_node.getAttribute('id');
            pars = pars + serialize (id);
         }
      }
      update_behaviour (); /* Update behaviour before request url */
      aws_xml_request (url, pars, '');
   }

   // Action on location
   function aws_xml_handler_location (node)
   {
      var url = node.getAttribute('url');

      /* Redirect to url */

      document.location.href = url;
   }

   // Action on create_sortable
   function aws_xml_handler_create_sortable (node)
   {
      var lists = []; /* Get all list for containment */

      var i = 0;

      for (i = 0; i < node.childNodes.length; i++) {
         var current_node = node.childNodes[i];
         if (current_node.nodeName == 'list') {
            lists.push (current_node.getAttribute('id'));
         }
      }

      /* Call Sortable.create for each element */

      for (i = 0; i < node.childNodes.length; i++) {
         var current_node = node.childNodes[i];
         if (current_node.nodeName == 'list') {
            var id = current_node.getAttribute('id');

            /* Add cursor style */

            var elm = document.getElementById (id);
            elm.style.cursor = 'move';

            /* Create sortable */

            Sortable.create
               (id, { containment:lists, constraint:false, dropOnEmpty:true });
         }
      }
   }

   // Action on destroy_sortable
   function aws_xml_handler_destroy_sortable (node)
   {
      var i = 0;

      /* Call Sortable.destroy for each element */

      for (i = 0; i < node.childNodes.length; i++) {
         var current_node = node.childNodes[i];
         if (current_node.nodeName == 'list') {
            var list_id = current_node.getAttribute('id');

            /* Revert cursor style */

            var elm = document.getElementById (list_id);
            elm.style.cursor = 'default';

            /* Destroy sortable */

            Sortable.destroy (list_id);
         }
      }
   }

   //  Action on apply_style
   function aws_xml_handler_apply_style (node)
   {
      var elm_id = node.getAttribute('id');

      if ($(elm_id) == null) return;

      var i = 0;
      for (i = 0; i < node.childNodes.length; i++) {
         var current_node = node.childNodes[i];
         if (current_node.nodeName == 'attribute') {
            var id    = current_node.getAttribute('id');
            var value = current_node.getAttribute('value');
            $(elm_id).style[id] = value;
         }
      }
   }

   // Add option_value/option_content into the given select
   function addToSelect (select_id, option_value, option_content)
   {
       // Create a new option
       var new_option = document.createElement("option");
       new_option.value = option_value;
       var content = document.createTextNode(option_content);
       new_option.appendChild(content);

       // And add it to select
       $(select_id).appendChild(new_option);
   }

   // Clear select content
   function clearSelect (select_id)
   {
       while ($(select_id).length > 0) {
           $(select_id).remove(0);
       }
   }

   // Delete a given option from the select
   function delSelectOption (select_id, option)
   {
       var idx = 0;
       while (idx < $(select_id).length) {
           if ($(select_id).options[idx].value == option) {
               $(select_id).remove(idx);
               return;
           }
           idx = idx + 1;
       }
   }

   // Select the given option from the select
   function selectChangeSelected (select_id, option)
   {
    var idx = 0;
       while (idx < $(select_id).length) {
           if ($(select_id).options[idx].value == option) {
               $(select_id).selectedIndex = idx;
               return;
           }
           idx = idx + 1;
       }
   }
</script>
