#!/usr/bin/env python
#                              Ada Web Server
#
#                     Copyright (C) 2003-2020, AdaCore
#
#  This library is free software; you can redistribute it and/or modify
#  This is free software;  you can redistribute it  and/or modify it
#  under terms of the  GNU General Public License as published  by the
#  Free Software  Foundation;  either version12,  or (at your option) any
#  later version.  This software is distributed in the hope  that it will
#  be useful, but WITHOUT ANY WARRANTY;  without even the implied warranty
#  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#  General Public License for  more details.
#
#  You should have  received  a copy of the GNU General  Public  License
#  distributed  with  this  software;   see  file COPYING3.  If not, go
#  to http://www.gnu.org/licenses for a complete copy of the license.
"""
./testsuite.py [OPTIONS] [TEST_NAME]

This module is the main driver for AWS testsuite
"""
import logging
import os
import sys
import argparse

from glob import glob
from makevar import MakeVar

from e3.env import Env
from e3.testsuite import Testsuite
from e3.testsuite.driver.adacore import AdaCoreLegacyTestDriver
from e3.testsuite.testcase_finder import ParsedTest, TestFinder


class AWSTestFinder(TestFinder):
    """Look for testcase in directories which contains a test.py file.
        
    The Z999_xfail testcase is ignored if not required by the user.
    """
    def probe(
        self,
        testsuite,
        dirpath,
        dirnames,
        filenames,
    ):
        test_name = os.path.basename(dirpath)

        # skip Z999_xfail if needed
        if not testsuite.env.options.with_Z999 and test_name == "Z999_xfail":
            return None

        if "test.py" in filenames:
            return ParsedTest(test_name, AdaCoreLegacyTestDriver, {}, dirpath)
        else:
            return None


class AWSTestsuite(Testsuite):
    """Run the testsuite."""

    def set_up(self):
        """Setup the testsuite environment."""

        # Build the discriminants
        discs = self.env.discriminants + ["ALL"]

        if self.env.target.os.name == "vxworks6":
            discs += "vxworks6"

        self.env.discs = discs

        # Read discriminants from testsuite.tags
        # The file testsuite.tags should have been generated by
        # AWS 'make setup'
        try:
            with open("testsuite.tags") as tags_file:
                discs += tags_file.read().strip().split(",")
        except IOError:
            sys.exit("Cannot find testsuite.tags. Please run make setup")

        logging.debug(
            "Running the testsuite with the following discriminants: %s"
            % ", ".join(discs)
        )

        # Save discriminants
        with open(self.env.options.output_dir + "/discs", "w") as discs_f:
            discs_f.write(" ".join(discs))

        if self.env.options.with_gdb:
            # Serialize runs and disable gprof
            self.env.options.jobs = 1
            self.env.options.with_gprof = False

        # Add current directory in PYTHONPATH (to find test_support.py)
        self.env.add_search_path("PYTHONPATH", os.getcwd())

        if self.env.options.from_build_dir:
            os.environ["ADA_PROJECT_PATH"] = os.getcwd()
            # Read makefile.setup to set proper build environment
            c = MakeVar("../makefile.setup")
            os.environ["PRJ_BUILD"] = c.get("DEBUG", "true", "Debug", "Release")
            os.environ["PRJ_XMLADA"] = c.get("XMLADA", "true", "Installed", "Disabled")
            os.environ["PRJ_LAL"] = c.get("LAL", "true", "Installed", "Disabled")
            os.environ["PRJ_LDAP"] = c.get("LDAP", "true", "Installed", "Disabled")
            os.environ["PRJ_SOCKLIB"] = c.get("NETLIB")
            os.environ["SOCKET"] = c.get("SOCKET")
            os.environ["LIBRARY_TYPE"] = "static"
            # from-build-dir only supported on native platforms
            os.environ["PLATFORM"] = "native"
            # Add current tools in from of PATH
            os.environ["PATH"] = (
                os.getcwd()
                + os.sep
                + ".."
                + os.sep
                + ".build"
                + os.sep
                + os.environ["PLATFORM"]
                + os.sep
                + os.environ["PRJ_BUILD"].lower()
                + os.sep
                + "static"
                + os.sep
                + "tools"
                + os.pathsep
                + os.environ["PATH"]
            )

        # Save the environment
        self.env.test_environ = dict(os.environ)
        self.env.test_environ["TEST_CONFIG"] = os.path.join(os.getcwd(), "env.dump")
        self.env.store(self.env.test_environ["TEST_CONFIG"])

    def add_options(self, parser: argparse.ArgumentParser) -> None:
        parser.add_argument(
            "--with-Z999",
            dest="with_Z999",
            action="store_true",
            default=False,
            help="Add a test that always fail",
        )
        parser.add_argument(
            "--with-gprof",
            dest="with_gprof",
            action="store_true",
            default=False,
            help="Generate profiling reports",
        )
        parser.add_argument(
            "--with-gdb",
            dest="with_gdb",
            action="store_true",
            default=False,
            help="Run with gdb",
        )
        parser.add_argument(
            "--with-valgrind",
            dest="with_valgrind",
            action="store_true",
            default=False,
            help="Run with valgrind",
        )
        parser.add_argument(
            "--from-build-dir",
            dest="from_build_dir",
            action="store_true",
            default=False,
            help="Run testsuite from local build (in repository)",
        )

    @property
    def test_finders(self):
        return [AWSTestFinder()]


if __name__ == "__main__":
    # Run the testsuite
    AWSTestsuite().testsuite_main()
