
$Id$

Here a some notes about things to fix, ideas and potential features to be
implemented:

- correctly handle all Date/Time format, there is 3 of them:

  Sun, 06 Nov 1994 08:49:37 GMT   ; RFC 822, updated by RFC 1123
  Sunday, 06-Nov-94 08:49:37 GMT  ; RFC 850, obsoleted by RFC 1036
  Sun Nov  6 08:49:37 1994        ; ANSI C's asctime() format

  (Nice to see that when designing an RFC they are considering the C way of
   doing things, seems completly awkward to me :)

  Actually only the first format is supported.

- implement multi-server with a dispatcher of request to build server which
  must support a lot of requests. Could be using GLADE or a standard
  redirector of request (using HTTP redirection).

- implement a Proxy server.

- change server parameters via the admin page (like the maximum number of
  connections, server name, active session, upload path...).

- Thread Pool management (dynamically adding lines if needed...)

- Make the Session management a separate partition to be able to share the
  session data across the network. Something needed to do load balancing into
  a Web Farm.

- More transparent SOAP support. It would be nice to be able to generate
  stub/skeleton from a spec file (this work could reuse the gnatstub ASIS
  appication). Another path is to implement WSDL support and generate SOAP
  stub/skeleton from it.

- We need to add the directory browser template into the config file.

- Replace OpenSSL by GNUTLS library when this library will become stable.

- Would be nice to handle the logging of errors.

- Would be nice to detect if users try to use the session feature when there
  is no session active in the server.

- Would be nice to have an ActiveX component to support Server Push on
  Internet Explorer.

- Would be nice to have a very light version of the Web Server - LAWS for
  Light Ada Web Server - this will be a nice solution for the communication
  sub-system. A LAWS would have only one task, no file-upload, not all the
  mechanisms to handle the concurrency...

- Support socket timeout options (send and receive timeout) at the OS
  level. Right now a task is doing the job.

- Support compress/gzip encoding if client support it.

- Sort out problem with client socket that are not closed and can't be
  reused. This happen if a lot of requests are done to the server.

- Cookie for the session is set for the whole site (path=/), would be nice to
  have a way to configure that.

- Support Session ID encoded into the URL to avoid use of cookie. Such a
  session ID will only be valid for the current session of course.

- Support session parameter of any types (only Boolean, Float, Integer and
  String are supported currently).

- Build a Web based file-system framework (AWSFS). Using GET/PUT to handle
  variables, inherited from a specific type, whose value is stored on an AWS
  server. The value will be automatically retrieved at initialization time and
  stored back into the AWSFS at finalization. These steps should be completely
  transparent to users.

- When removing the session (AWS.Session.Delete) it would be good to also
  remove the cookie on the client side.

- Have a way to retrieve server configuration from a callback procedure.

- Merge the message handling on the server and client side. Right now both are
  using different implementations.

- Implement AWS.Net.Std for GNAT.Sockets
