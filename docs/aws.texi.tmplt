\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename aws.info
@settitle Ada Web Server
@setchapternewpage off
@syncodeindex fn cp

@iftex
@afourpaper
@end iftex

@titlepage

@title AWS
@subtitle Ada Web Server
@subtitle $Revision$
@subtitle $Date$
@author Dmitriy Anisimkov (anisimkov@@yahoo.com)
@author Pascal Obry (p.obry@@wanadoo.fr)
@url {http://perso.wanadoo.fr/pascal.obry}

@vskip 0pt plus 1filll

@end titlepage

@finalout

@ifinfo
@node Top, Introduction, (dir), (dir)
@top Templates Parser

@menu
* Introduction::
* How to build it ?::
* How to use it ?::
* The AWS packages::
* Last notes::
* AWS APIs::
@end menu
@end ifinfo

@contents

@node Introduction, How to build it ?, Top, Top
@chapter Introduction

@noindent
AWS stand for Ada Web Server. It is an Ada implementation of the
HTTP/1.1 protocol as defined in the RFC 2616 from June 1999.

@noindent
The goal is not to build a full Web server but more to make it possible
to use a Web browser (like Internet Explorer, or Netscape Navigator) to
control an Ada application. As we'll see later it is also possible to
have two Ada programs exchange informations via the HTTP protocol. This
is possible as AWS also implement the client side of the HTTP protocol.

@noindent
Moreover with this library it is possible to have more than one server
in a single application. It is then possible to export differents kind
of services by using different HTTP ports, or two have different port
for differents services priority. Client which must be served with a
very high priority can be assigned a specific port for example.

@noindent
You must keep in mind that this is work in progress and only a very
small part of the HTTP/1.1 protocol is implemented. Nevertheless the
AWS project grows as days goes...

@noindent
AWS support also HTTPS (secure HTTP) using SSL. This is based on OpenSSL
a very good and Open Source SSL implementation.

@node How to build it ?, How to use it ?, Introduction, Top
@chapter How to build it ?

@noindent
AWS has been developped with GNAT under Windows NT but should be fairly
portable. To build AWS you need:

@itemize @bullet

@item an Ada95 compiler

@item a POSIX binding (Interface to the underlying OS services) ;

Under Windows you can use the one distributed on my homepage. Under UNIX
look for the Florist package at 
@url{http://www.cs.fsu.edu/~baker/florist.html}.

@item a socket binding ;

Under Windows you must use the one on my homepage which is a port (done 
by Dmitriy Anisimkov) to Win32 of the 0.1.9 version from ENST.

Under UNIX you must use the socket binding from ENST 
@url{http://www.infres.enst.fr/ANC/}.

@item OpenSSL (optional)

OpenSSL is an Open Source toolkit implementing the Secure Sockets Layer
(SSL v2 and v3) and much more. You'll find libraries for Win32 into this
distribution. For other paltforms just download the OpenSSL source
distribution from @url{http://www.openssl.org} and build it.

@end itemize

@noindent
When you have built all libraries you can build AWS. There is two ways
to build AWS:

@itemize @bullet
@item with SSL support

@smallexample
   $ make build_ssl
@end smallexample

@item without SSL support (no need for the OpenSSL libraries in this case).

@smallexample
   $ make build_std
@end smallexample

@end itemize

@node How to use it ?, The AWS packages, How to build it ?, Top
@chapter How to use it ?

@noindent
AWS is not a Web Server like IIS or Apache, it is a component to embedded
HTTP protocol in an application. It means that it is possible to build
an application which can also answer to a standard browser like
@i{Internet Explorer} or @i{Netscape Navigator}. Since AWS provides
support client and server HTTP protocol applications can communicate
through the HTTP channel. This give a way to build distributed applications.

@noindent
An application using AWS can open many HTTP channels. Each channel will use
a specific port. So it is possible to embedded some HTTP and some HTTPS
channels in the same application.

@noindent
To build a server you must:

@itemize @bullet

@item declare the HTTP channel

@smallexample
WS  : AWS.Server.HTTP (Max_Connection => 3, 
                       Port           => 1234,
                       Security       => False,
                       CB             => Service'Access);
@end smallexample

@noindent
Here we have declared an HTTP channel with a maximum of 3 simultaneous
connections using the port 1234. This channel is not secure (False) and
answer will be given by the procedure Service.

@item provides a callback procedure

@noindent
The callback procedure have the following prototype:

@smallexample
@b{function} Service (Request : @b{in} AWS.Status.Data) @b{return} AWS.Response.Data;
@end smallexample

@noindent
This procedure receive the request status. It is possible to retrieve
many data from request through the @code{AWS.Status} API.

@noindent
For example, to know what URI has been asked:

@smallexample
URI : @b{constant} string := AWS.Status.URI (Request);

@b{if} URI = "/whatever" @b{then}
   ...
@b{end if};
@end smallexample

@noindent
Then this function should return an answer using one of the constructors
in @code{AWS.Response}. For example, to return an HTML message:

@smallexample
AWS.Response.Build (Content_Type => "text/html",
                    Message_Body => "<p>just a demo");
@end smallexample

@noindent
It is also possible to return a file. This is the way to return a GIF:

@smallexample
AWS.Response.File (Content_Type => "image/gif",
                   Filename     => "adains.gif");
@end smallexample

@end itemize

@smallexample
@cartouche
@group
This documentation is not complete. Have a look at the demos directory. 
Almost every features are used by the samples there.
@end group
@end cartouche
@end smallexample

@node The AWS packages, Last notes, How to use it ?, Top
@chapter The AWS packages

@noindent
This section is left empty for now.

@node Last notes, AWS APIs, The AWS packages, Top
@chapter Last notes

@noindent
Thanks to the contributors and peoples who send me feedbacks, ideas
about AWS. In the early stage of the project this is very valuable.

@noindent
So thanks goes to Sune Falck, David C. Hoos, Jean-Fran@,cois Rameau.

@node AWS APIs, , Last notes, Top
@chapter AWS APIs

@section AWS.Status

@include ../src/aws-status.ads.texi

@section AWS.Response

@include ../src/aws-response.ads.texi

@bye
