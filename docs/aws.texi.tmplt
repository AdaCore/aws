\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename aws.info
@settitle Ada Web Server
@setchapternewpage off
@syncodeindex fn cp

@iftex
@afourpaper
@end iftex

@titlepage

@title AWS
@subtitle Ada Web Server
@subtitle $Revision$
@subtitle $Date$
@author Dmitriy Anisimkov (anisimkov@@yahoo.com)
@author Pascal Obry (p.obry@@wanadoo.fr)
@url{http://perso.wanadoo.fr/pascal.obry}

@vskip 0pt plus 1filll

@end titlepage

@finalout

@ifinfo
@node Top
@top Ada Web Server

@menu
* Introduction::
* How to build it ?::
* How to use it ?::
* Status page::
* Last notes::
* AWS API::
* References::
@end menu
@end ifinfo

@contents

@node Introduction
@chapter Introduction

@noindent
@code{AWS} stand for @i{Ada Web Server}. It is an Ada implementation of the
HTTP/1.1 protocol as defined in the RFC 2616 from June 1999.

@noindent
The goal is not to build a full Web server but more to make it possible
to use a Web browser (like Internet Explorer, or Netscape Navigator) to
control an Ada application. As we'll see later it is also possible to
have two Ada programs exchange informations via the HTTP protocol. This
is possible as @code{AWS} also implement the client side of the HTTP protocol.

@noindent
Moreover with this library it is possible to have more than one server
in a single application. It is then possible to export differents kind
of services by using different HTTP ports, or two have different port
for differents services priority. Client which must be served with a
very high priority can be assigned a specific port for example.

@noindent
As designed, @code{AWS} big difference with a standard @code{CGI} server
is that there is only one executable. A @code{CGI} server has one
executable for each request or so, this becomes a pain to build and
to distribute when the project gets bigger. We will also see that it is
easier with @code{AWS} to deal with session data.

@noindent
You must keep in mind that this is work in progress and only a small
part of the HTTP/1.1 protocol is implemented. Nevertheless the
@code{AWS} project grows as days goes...

@noindent
@code{AWS} support also HTTPS (secure HTTP) using SSL. This is based on OpenSSL
a very good and Open Source SSL implementation.

@node How to build it ?
@chapter How to build it ?

@ifinfo
@menu
* Requirements::
* AWS.OS_Lib::
* Building::
@end menu
@end ifinfo

@node Requirements
@section Requirements

@noindent
@code{AWS} has been developped with GNAT under Windows NT but should be fairly
portable. To build @code{AWS} you need:

@itemize @bullet

@item an Ada95 compiler

There is many of them. @code{AWS} has been developped with GNAT but uses
only Ada95 features. So any Ada95 compiler should be usable.

@item a POSIX binding (Interface to the underlying OS services) ;

Under Windows you can use the one distributed at: 
@url{http://perso.wanadoo.fr/pascal.obry}. Under UNIX look for the 
Florist package at @url{http://www.cs.fsu.edu/~baker/florist.html}.

@item a socket binding ;

Under Windows you must use the one distributed at:
@url{http://perso.wanadoo.fr/pascal.obry} which is a port (done 
by Dmitriy Anisimkov) to Win32 of the 0.1.9 version from ENST.

Under UNIX you must use the socket binding from ENST 
@url{http://www.infres.enst.fr/ANC/}.

@item OpenSSL (optional)

OpenSSL is an Open Source toolkit implementing the Secure Sockets Layer
(SSL v2 and v3) and much more. You'll find libraries for Win32 into this
distribution. For other paltforms just download the OpenSSL source
distribution from @url{http://www.openssl.org} and build it.

@end itemize

@node AWS.OS_Lib
@section AWS.OS_Lib

@noindent
The @code{AWS.OS_Lib} has 3 implementations. One using @code{POSIX}, one using
@code{GNAT.OS_Lib} and one using direct @code{Win32} calls.

@table @b

@item POSIX implementation

Version with POSIX is compiler and OS independant (well if you have a POSIX
implementation for your OS). Check out Florist which is available on many
UNIXs and the version for Win32 available under my homepage.

@smallexample
This is the default implementation.
@end smallexample

@item GNAT.OS_Lib implementation

Version using @code{GNAT.OS_Lib} is GNAT dependant and will run on whatever OS 
GNAT has be ported to.

@smallexample
Just copy @file{include/aws-os_lib-gnat.adb} over @file{src/aws-os_lib.adb}.
@end smallexample

@item Win32 implementation

Version for Win32 should be usable by any Ada compiler for Windows 
95/98/NT/2000.

@smallexample
Just copy @file{include/aws-os_lib-win32.adb} over @file{src/aws-os_lib.adb}.
@end smallexample

@end table

@node Building
@section Building

@noindent
When you have built and configured all libraries you must either set
ADA_INCLUDE_PATH and ADA_OBJECTS_PATH (for GNAT) to point to the right
directories or update the @code{INCLUDES} variable in top @file{makefile}.

@noindent
At this point you can build AWS. There is two ways to build AWS:

@itemize @bullet
@item with SSL support

@smallexample
   $ make build_ssl
@end smallexample

@item without SSL support (no need for the OpenSSL libraries in this case).

@smallexample
   $ make build_std
@end smallexample

@end itemize

@noindent
In each case you'll certainly have to edit the makefile to correctly set
the include path for the libraries @code{POSIX}, @code{OpenSSL} and 
@code{Socket}.

@node How to use it ?
@chapter How to use it ?

@ifinfo
@menu
* Basic notion::
* Configuration file::
* Session handling::
* File upload::
* Client side::
* Communication::
* Hotplug module::
* Server Log::
@end menu
@end ifinfo

@node Basic notion
@section Basic notion

@ifinfo
@menu
* Building an AWS server::
* Form parameters::
* Distribution of an AWS server::
@end menu
@end ifinfo

@noindent
@code{AWS} is not a Web Server like @i{IIS} or @i{Apache}, it is a component to
embedded HTTP protocol in an application. It means that it is possible
to build an application which can also answer to a standard browser like
@i{Internet Explorer} or @i{Netscape Navigator}. Since @code{AWS} provides
support client and server HTTP protocol applications can communicate
through the HTTP channel. This give a way to build distributed
applications, @xref{AWS.Client}.

@noindent
An application using @code{AWS} can open many HTTP channels. Each
channel will use a specific port. So it is possible to embedded some
HTTP and some HTTPS channels in the same application.

@node Building an AWS server
@subsection Building an AWS server

@noindent
To build a server you must:

@itemize @bullet

@item declare the HTTP channel

@smallexample
WS  : AWS.Server.HTTP (Max_Connection => 3, 
                       Port           => 1234,
                       Security       => False,
                       CB             => Service'Access,
                       Session        => False);
@end smallexample

@noindent
Here we have declared an HTTP channel with a maximum of 3 simultaneous
connections using the port 1234. This channel is not secure (False) and
answer will be given by the procedure Service. It is possible to
configure the server via a configuration file named @file{aws.ini}
@xref{Configuration file}.

@item Start the server

@noindent
You need to start the server before using it. This is done by calling
@code{AWS.Server.Start} (@xref{AWS.Server}.)

@smallexample
   procedure Start (Web_Server : @b{in out} HTTP;
                    Name       : @b{in}     String;
                    Admin_URI  : @b{in}     String := No_Admin);
   --  @i{Start the Web server. It initialize the connections lines.}
   --  @i{Admin_URI must be set to enable the admin status page.}
@end smallexample

@noindent
@code{Start} takes three parameters, the first one if the HTTP server to
start, the second one is the server name as shown in the administrative page,
and the third one is the name of the administrative page if 
needed. By default the value if the null string. The administrative page
returns many information about the server. It is possible to
configure the server via a configuration file named @file{aws.ini}
@xref{Configuration file}.

@item provides a callback procedure

@noindent
The callback procedure has the following prototype:

@smallexample
@b{function} Service (Request : @b{in} AWS.Status.Data) @b{return} AWS.Response.Data;
@end smallexample

@noindent
This procedure receive the request status. It is possible to retrieve
information about the request through the @code{AWS.Status} API 
(@xref{AWS.Status}.).

@noindent
For example, to know what URI has been asked:

@smallexample
URI : @b{constant} String := AWS.Status.URI (Request);

@b{if} URI = "/whatever" @b{then}
   ...
@b{end if};
@end smallexample

@noindent
Then this function should return an answer using one of the constructors
in @code{AWS.Response} (@xref{AWS.Response}.). For example, to return an
HTML message:

@smallexample
AWS.Response.Build (Content_Type => "text/html",
                    Message_Body => "<p>just a demo");
@end smallexample

@noindent
It is also possible to return a file. For example, here is the way to
return a PNG image:

@smallexample
AWS.Response.File (Content_Type => "image/png",
                   Filename     => "adains.png");
@end smallexample

@end itemize

@node Form parameters
@subsection Form parameters

@noindent
Form parameters are stored into a table of key/value pair. The key is the form
input tag name and the value is the content of the input field as filled by
the user.

@smallexample
Enter your name 

<FORM METHOD=GET ACTION=/get-form>"
<INPUT TYPE=TEXT NAME=name VALUE="<default>" size=15>
<INPUT TYPE=SUBMIT NAME=go VALUE="Ok">
</FORM>
@end smallexample

@noindent
In this example there is two form parameters:

@table @b
@item name
The value is the content of this text field as filled by the client.

@item go
The value is "Ok".
@end table

@noindent
There is three functions (in @code{AWS.Status}) to retrieve the tag name
or value. Here are some examples:

@table @code
@item AWS.Status.Parameter (Request, "name")
Returns the value for parameter named @b{name}

@item AWS.Status.Parameter_Name (Request, 1)
Returns the string "name".

@item AWS.Status.Parameter (Request, 1)
Returns the value for parameter named @b{name}

@item AWS.Status.Parameter (Request, "go")
Returns the string "Ok".

@item AWS.Status.Parameter_Name (Request, 2)
Returns the string "go".

@item AWS.Status.Parameter (Request, 2)
Returns the string "Ok".
@end table

@noindent
@code{Request} is the @code{AWS} current connection status passed to the
callback procedure. For a discussion about the callback procedure
@xref{Building an AWS server}.

@node Distribution of an AWS server
@subsection Distribution of an AWS server

@noindent
The directory containing the server program must contain the following
files if you plan to use a status page @xref{Status page}.

@table @file
@item status.tmplt

The template HTML file for the @code{AWS} status page.

@item logo.png

The @code{AWS} logo displayed on the status page.

@item up.png

The @code{AWS} hotplug table up arrow.

@item down.png

The @code{AWS} hotplug table down arrow.

@end table

@smallexample
@cartouche
@group
This documentation is not complete. Have a look at the demos directory. 
Almost all features are used by the samples there.
@end group
@end cartouche
@end smallexample

@node Configuration file
@section Configuration file

@noindent
The configuration file is a way to configure the server without
recompiling it. The configuration file is named @file{aws.ini}, current
supported options are:

@table @code
@item Server_Name
The name of the server. This must be used when calling @code{AWS.Server.Start}.

@item Server_Port
The port where server will wait for incomming connections requests. This
must be used when declaring the @code{HTTP} object.

@item Max_Connection
This is the maximum number of simultaneous connections for the
server. This must be used when declaring the @code{HTTP} object.

@item Admin_URI
This is the URI to call the administrative page. This must be used when
calling @code{AWS.Server.Start}.

@item Log_File_Directory
This is to set the directory where log file must be written. This
parameter will be used automatically by @code{AWS.Log} if logging
facility is enabled. By default log files are written in the current directory.

@item Upload_Directory
This is to set the directory where upload files must be stored. By
default uploaded files are written in the current directory.
@end table

@noindent
Each option value can be retrieved using the @code{AWS.Config} unit.

@noindent
For example to build a server where the @i{port} and the @i{maximum number} of
connection can be changed via the configuration file:

@smallexample
WS  : AWS.Server.HTTP (Max_Connection => AWS.Config.Max_Connection, 
                       Port           => AWS.Config.Server_Port,
                       Security       => False,
                       CB             => Service'Access,
                       Session        => False);
@end smallexample

@node Session handling
@section Session handling

@noindent
@code{AWS} provides a way to keep session data while users are
browsing. There is no need to mess with the Cookies, @code{AWS} will do
that for you. The idea is simple. A session ID will be transparently
created and then you'll be able to insert and retrieve session data
using a standard Ada API (@xref{AWS.Session}.). Session data
are key/value pair each of them beeing strings. How to deal with that ?

@itemize

@item First you declare an HTTP chanel with session.

@smallexample
WS  : AWS.Server.HTTP (Max_Connection => 3, 
                       Port           => 1234,
                       Security       => False,
                       CB             => Service'Access,
                       Session        => True);
@end smallexample

@noindent
Here we have declared an HTTP channel with a maximum of 3 simultaneous
connections using the port 1234. This channel is not secure (False) and
answer will be given by the procedure Service. A session ID will be created.

@item Next, in the Service callback procedure that you have provided you
must retrieve the Session ID. As we have seen, the callback procedure
has the following prototype:

@smallexample
@b{function} Service (Request : @b{in} AWS.Status.Data) @b{return} AWS.Response.Data;
@end smallexample

@noindent
The Session ID is keept in the Request object:

@smallexample
Session_ID  : @b{constant} AWS.Session.ID := AWS.Status.Session (Request);
@end smallexample

@item From there it is quite easy to get or set some session data using
the provided API. For example:

@smallexample
@b{declare}
   C : Integer;
@b{begin}
   C := AWS.Session.Get (Session_ID, "counter");
   C := C + 1;
   AWS.Session.Set (Session_ID, "counter", C);
@b{end};
@end smallexample

@noindent
This example first get the value (as an Integer) for session data whose
key is "@code{counter}", increment this counter and then set back it to
the new value.

@end itemize

@node File upload
@section File upload

@noindent
File upload is the way to send a file from the client to the server. To
enable file upload on the client side the Web page must contain a @b{FORM}
with an @b{INPUT} tag of type @b{FILE}.

@smallexample
<FORM ACTION=/whatever METHOD=POST>
File to process: <INPUT NAME=filename TYPE=FILE>
<INPUT TYPE=SUBMIT NAME=go VALUE="Send File">
</FORM>
@end smallexample

@noindent
On the server side, AWS will retrieve the file and put it into the
upload directory. This directory can be changed using the configuration file.
@xref{Configuration file}.

@noindent
AWS will also setup the form parameters as usual. In the above example
there is two parameters (@xref{Form parameters}.)

@table @b
@item filename
The value is the full pathname of the file on the server. (i.e. the
upload directory concatenated with the filename).

@item go
The value is "Send File"
@end table

@node Client side
@section Client side

@noindent
@code{AWS} is not only a server it also implement the HTTP and HTTPS
protocol from the client side. For example with @code{AWS} it is
possible to get a Web page content using the @code{AWS.Client} API,
@xref{AWS.Client}.

@noindent
It also support client @b{Keep-Alive} connections. It is then possible to
request many URI from the same server using the same connection
(i.e. the same sockets).

@noindent
@code{AWS} client API also support proxy, proxy authentification and Web server
authentification. Only basic (and not digest) authentification is
supported at this time.

@noindent
Let's say that you want to retrieve the @code{contrib.html} Web page from
Pascal Obry's homepage which is @url{http://perso.wanadoo.fr/pascal.obry}. The
code to do so is:

@smallexample
Data := Client.Get
  (URL => "http://perso.wanadoo.fr/pascal.obry/contrib.html");
@end smallexample

@noindent
From there you can ask for the result's content type:

@smallexample
@b{if} Response.Content_Type (Data) = "text/html" @b{then}
   ...
@b{end if};
@end smallexample

@noindent
And display the content if it is some kind of text data:

@smallexample
Text_IO.Put_Line (Response.Message_Body (Data));
@end smallexample

@noindent
If the content is some kind of binary data (executable, png image, Zip
archive...), then it is possible to write the result to a file for
example. Look at the @code{agent} program in the @code{demos} directory.

@node Communication
@section Communication

@ifinfo
@menu
* Communication - client side::
* Communication - server side::
@end menu
@end ifinfo

@noindent
This API is used to do communication between programs using the HTTP
protocol. It is a very simple API not to be compared with GLADE.

@noindent
In a communication there is a Client and a Server. Here is what is to be
done on both sides.

@node Communication - client side
@subsection Communication - client side

@noindent
On the client side it is quite simple. You just have to send a message
using @code{AWS.Communication.Client.Send_Message}.

@smallexample
@b{function} Send_Message (Server     : @b{in} String;
                       Port       : @b{in} Positive;
                       Name       : @b{in} String;
                       Parameters : @b{in} Parameter_Set := Null_Parameter_Set)
  @b{return} Response.Data;
@end smallexample

@noindent
The message is sent to the specified server using the given port. A
message is composed of a name which is a string and a set of
parameters. There is a parameter set constructor in
@code{AWS.Communication}. This function return a response as for any
callback procedure.

@node Communication - server side
@subsection Communication - server side

@noindent
On the server side things are a bit more complex but not that
difficult. You must instanciate the @code{AWS.Communication.Server}
generic package by providing a callback procedure. This callback
procedure will must handle all kind of message that a client will send.

@noindent
During instanciation you must also pass a context for the communication
server. This context will be passed back to the callback procedure.

@smallexample
@b{generic}

   @b{type} T (<>) @b{is limited private};
   @b{type} T_Access @b{is access} T;

   @b{with function} Callback
     (Server     : @b{in} String;
      Name       : @b{in} String;
      Context    : @b{in} T_Access;
      Parameters : @b{in} Parameter_Set := Null_Parameter_Set)
     @b{return} Response.Data;

@b{package} AWS.Communication.Server @b{is}
   ...
@end smallexample

@smallexample
@cartouche
@group
A complete example can be found in the demos directory. Look for 
@file{com_1.adb} and @file{com_2.adb}.
@end group
@end cartouche
@end smallexample

@noindent
Note that this communication API is used by the Hotplug module facility
@xref{Hotplug module}.

@node Hotplug module
@section Hotplug module

@ifinfo
@menu
* Hotplug module - creation::
* Hotplug module - server activation::
@end menu
@end ifinfo

@noindent
An @b{Hotplug module} is a module that can by dynamically bind to a
running server. It is a Web server and the development process is very
similar to what we have seen until now @xref{Building an AWS server}. 
The Hotplug module will register itself to a Web server by
sending a message using the communication API. The Hotplug module send
to the server a regular expression and an URL. The main server will
redirect all URL matching the regular expression to the Hotplug module.

@noindent
Note that the main server will redirect the URL to the first matching regular
expression.

@node Hotplug module - creation
@subsection Hotplug module - creation

@noindent
Here is how to create an Hotplug module:

@enumerate 1

@item First you create a standard Web server @xref{Building an AWS server}.

@smallexample
WS  : AWS.Server.HTTP
  (3, 1235, False, Hotplug_CB.Hotplug'Access, False);
@end smallexample

Here we have a server listening to the port 1235. This server can be
used alone if needed as any Server developed with AWS.

@item Then you register the Hotplug module to the main server
@xref{Communication - client side}.

@smallexample
Response := AWS.Communication.Client.Send_Message
  ("dieppe", 2222,
   AWS.Server.Hotplug.Register_Message,
   AWS.Communication.Parameters
   (".*AWS.*",
    "http://" & AWS.Utils.Gethostname & ":1235/"));
@end smallexample

We ask for every @code{URI} containing the string "AWS" to call the
server running on the Hotplug hostname using port @code{1235}. This
message is sent to the communication server running on @code{dieppe} at
port @code{2222}.

@item When the Hotplug module is stopped, you must unregister it

@smallexample
Response := AWS.Communication.Client.Send_Message
  ("dieppe", 2222,
   AWS.Server.Hotplug.Unregister_Message,
   AWS.Communication.Parameters (".*AWS.*"));
@end smallexample

Here we ask to unregister the Hotplug module. The regular expression
served as a key.

@end enumerate

@node Hotplug module - server activation
@subsection Hotplug module - server activation

@noindent
On the server side you must activate the Hotplug feature:

@smallexample
AWS.Server.Hotplug.Activate (WS'Unchecked_Access, 2222);
@end smallexample

@noindent
Here WS is a standard Web Server.

@smallexample
@cartouche
@group
A complete example can be found in the demos directory. Look for 
@file{main.adb} and @file{hotplug.adb}.
@end group
@end cartouche
@end smallexample

@node Server Log
@section Server Log

@noindent
It is possible to have the server activitly logged into the file
@file{aws-<date>.log}. To activate the logging you must call the
@code{AWS.Log.Start}, and it is possible to stop logging by calling
@code{AWS.Log.Stop}. @xref{AWS.Log}. Log file can be changed
automatically each day or month, see @code{AWS.Log.Start} parameter.

@noindent
The log format is very close to the Apache Web server one.

@smallexample
<client IP> - <auth name> - [<date and time>] "<request>" <status code>

For example:

100.99.12.1 -  - [22/Nov/2000:11:44:14] "GET /whatever HTTP/1.1" 200
@end smallexample

@noindent
The only missing part is the length of the data sent to the client that
is found at the end of the log data line.

@node Status page
@chapter Status page

@noindent
The status page gives information about the @code{AWS} internal status. For
example it returns the server socket ID, the number of simultaneous
connection, the number of time a connection has been used...

@noindent
To display the information @code{AWS} use a template file. The template
file @file{status.tmplt} is an HTML file with some specific file
recongnized by the parser. For more information about how does the
template parser works, please look for the template parser distribution at
@url{http://perso.wanadoo.fr/} in the Ada section.

@noindent
Here are the tag variables recognized by AWS:

@table @b

@item ABORTABLE_L (vector tag)

A list of boolean. One for each connection. True means that this
connection can be aborted if none is available. This is to be inserted
in a template table.

@item ACTIVITY_COUNTER_L (vector tag)

A list of natural. One for each connection. This is the number of
request the connection has answered. This counter is reset each time the
connection is closed. In other word this is the number of request a
keep-alive connection has processed.

@item ACTIVITY_TIME_STAMP_L (vector tag)

A list of date. One for each connection. This is the time of the latest
request answered.

@item KEYS_L (vector tag)

A list of set of keys (for each key correspond a value in the tag
VALUES_L, see below). Each key in the vector tag start with an HTML
"<td>" tag. This is to be able to display the key/value in column.

@item LOGO

A string to be placed in an img HTML tag. This is the name of the AWS
logo image.

@item MAX_CONNECTION

Maximum number of simultaneous connections.

@item OPENED_L (vector tag)

A list of boolean. One for each connection. True means that the socket
is open. This is to be inserted in a template table.

@item QUIT_L (vector tag)

A list of boolean. One for each connection. True means that the
connection will terminate as soon as possible. This is to be inserted
in a template table.

@item SECURITY

A boolean set to True if this is a secure socket (HTTPS/SSL).

@item SERVER_NAME

Name of the server. This is set when starting the server with
@code{AWS.Server.Start}.

@item SERVER_PORT

The server HTTP port.

@item SERVER_SOCK

Server socket ID.

@item SESSIONS_L (vector tag)

A list of session ID.

@item SLOT_ACTIVITY_COUNTER_L (vector tag)

A list of natural. One for each connection. This is the total number of
requests the slot has answered. This counter is never reseted.

@item SOCK_L (vector tag)

A list of sockets ID. One for each connection.

@item VALUES_L (vector tag)

A list of set of values (for each value correspond a key in the vector tag
KEYS_L, see above). Each key in the vector tag start with an HTML "<td>"
tag. This is to be able to display the key/value in column.

@item VERSION

@code{AWS} version number.

@end table

@node Last notes
@chapter Last notes

@noindent
Note that this is an ongoing project at its early stage. The goal is not
to do a full Web Server, for that @i{Apache} is unbeatable. If you have an
idea or need a feature not yet implemented, send us a mail.

@noindent
Thanks to the contributors and peoples who send feedbacks, ideas
about AWS. In the early stage of the project this is very valuable.

@noindent
So thanks goes to Sune Falck, David C. Hoos, Jean-Fran@,cois Rameau.

@node AWS API
@chapter AWS API

@ifinfo
@menu
* AWS.Client::
* AWS.Communication::
* AWS.Communication.Client::
* AWS.Communication.Server::
* AWS.Config::
* AWS.Log::
* AWS.MIME::
* AWS.Response::
* AWS.Server::
* AWS.Server.Hotplug::
* AWS.Session::
* AWS.Status::
@end menu
@end ifinfo

@node AWS.Client
@section AWS.Client

@include ../src/aws-client.ads.texi

@node AWS.Communication
@section AWS.Communication

@include ../src/aws-communication.ads.texi

@node AWS.Communication.Client
@section AWS.Communication.Client

@include ../src/aws-communication-client.ads.texi

@node AWS.Communication.Server
@section AWS.Communication.Server

@include ../src/aws-communication-server.ads.texi

@node AWS.Config
@section AWS.Config

@include ../src/aws-config.ads.texi

@node AWS.Log
@section AWS.Log

@include ../src/aws-log.ads.texi

@node AWS.MIME
@section AWS.MIME

@include ../src/aws-mime.ads.texi

@node AWS.Response
@section AWS.Response

@include ../src/aws-response.ads.texi

@node AWS.Server
@section AWS.Server

@include ../src/aws-server.ads.texi

@node AWS.Server.Hotplug
@section AWS.Server.Hotplug

@include ../src/aws-server-hotplug.ads.texi

@node AWS.Session
@section AWS.Session

@include ../src/aws-session.ads.texi

@node AWS.Status
@section AWS.Status

@include ../src/aws-status.ads.texi

@node References
@chapter References

@noindent
Here are a list of documents used to implement AWS:

@enumerate 1

@item RFC 1867

@smallexample
Network Working Group                                           E. Nebel
Request For Comments: 1867                                   L. Masinter
Category: Experimental                                 Xerox Corporation
                                                           November 1995


                     Form-based File Upload in HTML
@end smallexample

@item RFC 1945

@smallexample
Network Working Group                                     T. Berners-Lee
Request for Comments: 1945                                       MIT/LCS
Category: Informational                                      R. Fielding
                                                               UC Irvine
                                                              H. Frystyk
                                                                 MIT/LCS
                                                                May 1996


                Hypertext Transfer Protocol -- HTTP/1.0
@end smallexample

@item RFC 2616

@smallexample
Network Working Group                                      R. Fielding
Request for Comments: 2616                                   UC Irvine
Obsoletes: 2068                                              J. Gettys
Category: Standards Track                                   Compaq/W3C
                                                              J. Mogul
                                                                Compaq
                                                            H. Frystyk
                                                               W3C/MIT
                                                           L. Masinter
                                                                 Xerox
                                                              P. Leach
                                                             Microsoft
                                                        T. Berners-Lee
                                                               W3C/MIT
                                                             June 1999


                Hypertext Transfer Protocol -- HTTP/1.1
@end smallexample

@item RFC 2617

@smallexample
Network Working Group                                          J. Franks
Request for Comments: 2617                       Northwestern University
Obsoletes: 2069                                          P. Hallam-Baker
Category: Standards Track                                 Verisign, Inc.
                                                            J. Hostetler
                                                         AbiSource, Inc.
                                                             S. Lawrence
                                                   Agranat Systems, Inc.
                                                                P. Leach
                                                   Microsoft Corporation
                                                             A. Luotonen
                                     Netscape Communications Corporation
                                                              L. Stewart
                                                       Open Market, Inc.
                                                               June 1999


      HTTP Authentication: Basic and Digest Access Authentication
@end smallexample

@item draft 302

@smallexample
Transport Layer Security Working Group                  Alan O. Freier
INTERNET-DRAFT                                 Netscape Communications
Expire in six months                                    Philip Karlton
                                               Netscape Communications
                                                        Paul C. Kocher
                                                Independent Consultant
                                                     November 18, 1996










                          The SSL Protocol
                            Version 3.0
@end smallexample

@end enumerate

@bye
